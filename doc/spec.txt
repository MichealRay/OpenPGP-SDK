Nominet's requirements
----------------------

We currently use the PGP APIs to do the following:
1. Load a key ring into memory.
2. Find a key in a key ring and store a reference to it.
3. Use a secure key to sign a message in clear text ascii armour (equiv. 
of pgp -sta)
4. Check the signature on a clear text signed message, giving back the 
contents, the key that signed it and the
   time at which it was signed. If the check fails, we need to know the 
reason why e.g. Was the signature corrupt,
  did it match the text, was the message in the correct format, has the 
key be revoked etc.
5. Add an ascii armoured key to a key ring held in memory.
6. Store a key ring held in memory back to disk.

We may also want to use standard encryption and decryption in the future.

Our requirements
----------------

1. encrypting, signing, decrypting, verifying documents.

2. creating keys

3. issuing key certifications and revocations

4. keyring handling (on disk storage)

5. keyserver querying fu

6. trust handling (a la gpg)

7. user id: add, remove, revoke

8. key signing

9. export of <everything>

10. import of <everything>

Specific non-requirements
-------------------------

1. We will not use GPG slave processes to do keyserver queries - nor
   any other slave process, this will be done entirely in-process.
